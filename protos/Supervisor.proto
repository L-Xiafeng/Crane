/**
 * Copyright (c) 2024 Peking University and Peking University
 * Changsha Institute for Computing and Digital Economy
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package crane.grpc;
option go_package = "/protos/subprocess";

import "PublicDefs.proto";

message CanStartMessage {
  bool ok = 1;
}

message CranedReady {
  uint32 task_id = 1;
  bool ok = 2;
}

message SupervisorReady {
  bool ok = 1;
}

message CreateCgroupRequest{
  message GresFileMeta{
    uint32 major = 1;
    uint32 minor = 2;
    string op_type = 3;
  }

  AllocatableResource allocatable_res_in_node = 1;
  repeated GresFileMeta gres_file_meta = 2;
  map<string, string> gres_env = 3;

}

message CreateCgroupReply{
  bool ok = 1;
}

message TaskExecutionRequest{
  TaskToD task = 1;
}

message TaskExecutionReply{
  bool ok = 1;
}

message TerminateRequest{
}

message TerminateReply{
  bool ok = 1;
}

message ChildProcessReady {
  bool ok = 1;
}

service Supervisor{
  rpc CreateCgroup(CreateCgroupRequest) returns(CreateCgroupReply);
  rpc StartTask(TaskExecutionRequest) returns (TaskExecutionReply);
  //  rpc CheckTaskStatus(CheckTaskStatusRequest) returns(CheckTaskStatusReply);
}